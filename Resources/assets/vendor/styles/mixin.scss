@use "sass:string";
// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------


// Flexbox display
// flex or inline-flex
@mixin flex-display($display: flex) {
  display: -webkit-box;
  display: -webkit-#{$display};
  display: -ms-#{$display}box; // IE10 uses -ms-flexbox
  display: -moz-#{$display}; // IE11
  display: $display;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($columns: initial) {
  -webkit-flex: $columns;
  -ms-flex: $columns;
  flex: $columns;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap: nowrap) {
  -webkit-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin flex-order($order: 0) {
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow: 0) {
  -webkit-flex-grow: $grow;
  -ms-flex-grow: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink: 1) {
  -webkit-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width: auto) {
  -webkit-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify: flex-start) {
  -webkit-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align: stretch) {
  -webkit-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align: stretch) {
  -webkit-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align: auto) {
  -webkit-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}


// --------------------------------------------------
// Grid mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
@mixin grid-display($display: grid) {
  display: -webkit-box;
  display: -webkit-#{$display};
  display: -ms-#{$display}box; // IE10 uses -ms-flexbox
  display: -moz-#{$display}; // IE11
  display: $display;
}

@mixin grid-template-columns($value) {
  grid-template-columns: $value;
  -ms-grid-columns:$value;
}

@mixin grid-template-rows($value) {
  grid-template-rows: $value;
  -ms-grid-rows:$value;
}
@mixin grid-column-gap($value) {
  -moz-column-gap: $value;
  -webkit-column-gap: $value;
  column-gap: $value;
}
@mixin grid-row-gap($value) {
  -moz-row-gap: $value;
  -webkit-row-gap: $value;
  row-gap: $value;
}

@mixin gris-columns-row($type, $start, $end) {
  grid-#{$type}: #{$start} / #{$end};
  -ms-grid-#{$type}: $start;
  -ms-grid-#{$type}-span: $end - $start;
}

@mixin grid-column($start, $end) {
  @include gris-columns-row(column, $start, $end);
}

@mixin grid-row($start, $end) {
  @include gris-columns-row(row, $start, $end);
}


// --------------------------------------------------
// Global LESS mixins
// --------------------------------------------------
@mixin flex-block($wrap: wrap, $alignItems: center, $alignContent: center, $justifyContent: center) {
  @include flex-display();
  @include flex-wrap($wrap);
  @include align-items($alignItems);
  @include align-content($alignContent);
  @include justify-content($justifyContent);
}
$easingTransition: cubic-bezier(0.250,0.460,0.450,0.940) !default;
@mixin transition-default($types: all, $time: 300ms){
  -webkit-transition: $types $time $easingTransition;
  -moz-transition: $types $time $easingTransition;
  -ms-transition: $types $time $easingTransition;
  -o-transition: $types $time $easingTransition;
  transition: $types $time $easingTransition;
}
@mixin transitions-default($properties: [], $time: 300ms){
  $transition: ();
  @each $property in $properties {
    $transition: append(
        $transition, ($property $time $easingTransition), $separator: comma
    );
  }
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}
@mixin transition-transform($transition) {
  -webkit-transition: -webkit-transform $transition;
  -moz-transition: -moz-transform $transition;
  -o-transition: -o-transform $transition;
  transition: transform $transition;
}
@mixin transform-translate($height,$width){
  transform: translate($height,$width);
  -webkit-transform: translate($height,$width);
  -moz-transform: translate($height,$width);
  -o-transform: translate($height,$width);
  -ms-transform: translate($height,$width);
}

@mixin transform($expression){
  transform: $expression;
  -webkit-transform: $expression;
  -moz-transform: $expression;
  -o-transform: $expression;
  -ms-transform: $expression;
}

@mixin position-disabled()
{
  top:auto;
  left:auto;
  right:auto;
  bottom:auto;
  transform: translate(0, 0);
  -webkit-transform: translate(0, 0);
  -moz-transform: translate(0, 0);
  -o-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
}
@mixin position-middle()
{
  top:50%;
  left:50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
}
@mixin position-middle-y()
{
  top:50%;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
}
@mixin position-middle-x()
{
  left:50%;
  transform: translateX(-50%);
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -o-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
}

@mixin radius($radius){
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -moz-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  -ms-transform: rotate($degrees); // IE9 only
  transform: rotate($degrees);
}
@mixin scale($ratio, $ratio-y...) {
  -webkit-transform: scale($ratio, $ratio-y);
  -moz-transform: scale($ratio, $ratio-y);
  -o-transform: scale($ratio, $ratio-y);
  -ms-transform: scale($ratio, $ratio-y); // IE9 only
  transform: scale($ratio, $ratio-y);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  -ms-transform: translate($x, $y); // IE9 only
  transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
  -moz-transform: skew($x, $y);
  -o-transform: skew($x, $y);
  -ms-transform: skew($x, $y); // IE9 only
  transform: skew($x, $y);
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z); // IE9 only
  transform: translate3d($x, $y, $z);
}

@mixin rotate-x($degrees) {
  -webkit-transform: rotateX($degrees);
  -moz-transform: rotateX($degrees);
  -o-transform: rotateX($degrees);
  -ms-transform: rotateX($degrees); // IE9 only
  transform: rotateX($degrees);
}
@mixin rotate-y($degrees) {
  -webkit-transform: rotateY($degrees);
  -moz-transform: rotateY($degrees);
  -o-transform: rotateY($degrees);
  -ms-transform: rotateY($degrees); // IE9 only
  transform: rotateY($degrees);
}
@mixin perspective($perspective) {
  -webkit-transform: $perspective;
  -moz-transform: $perspective;
  -o-transform: $perspective;
  -ms-transform: $perspective; // IE9 only
  transform: $perspective;
}
@mixin perspective-origin($perspective) {
  -webkit-transform: $perspective;
  -moz-transform: $perspective;
  -o-transform: $perspective;
  -ms-transform: $perspective; // IE9 only
  transform: $perspective;
}
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin; // IE9 only
  transform-origin: $origin;
}
@mixin transform-expression($expression){
  -webkit-transform: $expression;
  -moz-transform: $expression;
  -o-transform: $expression;
  -ms-transform: $expression; // IE9 only
  transform: $expression;
}
@mixin image-cover($objectFit: contain) {
  height: 100%;
  width: 100%;
  object-fit: $objectFit;
  display: block;
  object-position: 50% 50%;
}
@mixin picture-cover($objectFit: contain) {
  @include flex-display();
  height: 100%;
  width: 100%;
  img {
    @include imageCover($objectFit);
  }
}
@mixin flex-is-wrap() {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
@mixin box-shadow($x, $y, $blur, $spread, $color, $inset...) {
  -moz-box-shadow: $inset $x $y $blur $spread $color;
  -webkit-box-shadow: $inset $x $y $blur $spread $color;
  -o-box-shadow: $inset $x $y $blur $spread $color;
  box-shadow: $inset $x $y $blur $spread $color;
  filter:progid:DXImageTransform.Microsoft.Shadow($color, Direction=NaN, Strength=$spread);
}
@mixin box-shadow-arguments($arguments) {
  -moz-box-shadow: #{$arguments};
  -webkit-box-shadow: #{$arguments};
  -o-box-shadow: #{$arguments};
  box-shadow: #{$arguments};
}
@mixin box-sizing($boxSizing: border-box) {
  -webkit-box-sizing: $boxSizing;
  -moz-box-sizing: $boxSizing;
  box-sizing: $boxSizing;
}

@mixin appearance($arguments){
  appearance: $arguments;
  -webkit-appearance: $arguments;
  -moz-appearance: $arguments;
}
@mixin animation($arguments) {
  -webkit-animation: $arguments;
  -moz-animation: $arguments;
  animation: $arguments;
}

@mixin truncate-lines($nbLine) {
  display: -webkit-box;
  display: -moz-box;
  -webkit-line-clamp: $nbLine;
  -moz-line-clamp: $nbLine;
  line-clamp: $nbLine;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  box-orient: vertical;
  overflow: hidden;
}